import os
import csv
import pickle
import numpy as np
from scipy.sparse import csr_matrix
from tqdm import tqdm

"""
Just a reminder :)
features_prefixes = ['real_permission', 'feature', 'api_call', 
                    'call', 'permission', 'provider', 'activity',
                    'intent', 'service_receiver', 'activity', 'url']
sizes: {'real_permission': 70,
        'feature': 72,      
        'api_call': 315,
        'call': 733,
        'permission': 3812, 
        'provider': 4513, 
        'intent': 6379,
        'service_receiver': 33222
        'activity': 185729,
        'url': 310488, 
}
"""

vectors_path = './drebin/feature_vectors/'
csv_path = './drebin/sha256_family.csv'

def get_prefixes():
    all_prefixes = ['real_permission', 'feature', 'api_call', 'call', 'permission', 'provider', 'activity', 'intent', 'service_receiver', 'activity', 'url']
    return all_prefixes[:6]

def malware_hashes():
    with open(csv_path) as csv_file:
        csv_reader = csv.reader(csv_file)
        next(csv_reader)
        return [ elem[0] for elem in csv_reader ] 
        
def get_files_features():
    res = None
    if os.path.exists('files_features.pickle'):
        with open('files_features.pickle', 'rb') as pickle_file:
            print('loading files_features file...')
            res = pickle.load(pickle_file)
            print('done')
    else:
        res = {}
        for file_name in tqdm(os.listdir(vectors_path), desc='getting files features'):
            with open(vectors_path+file_name, 'r') as f:
                val = [l.strip() for l in f.readlines() if l != '\n']
                if len(val) > 0:
                    res[file_name] = val 
        with open('files_features.pickle', 'wb') as pickle_file:
            pickle.dump(res, pickle_file)
    return res

def get_features(files_features):
    l = []
    for v in files_features.values():
        l.extend(list(v))
    return list(set(l))

def pref_clean(files_features, prefixes):
    res = {}
    for f in files_features:
        values = files_features[f]
        values = [v for v in values if v.split('::')[0] in prefixes]
        if len(values) > 0:
            res[f] = values
    return res
    
def get_encoded_features(prefixes):
    files_features = pref_clean(get_files_features(), prefixes)
    features = get_features(files_features)
    print(len(features))
    res = {}
    for file_name in tqdm(files_features, desc='creating encoded features file'):
        file_features = files_features[file_name]
        l = [1 if f in file_features else 0 for f in features ]
        res[file_name] = l
    return res

def load_drebin(prefixes):
    if os.path.exists('drebin.pickle'):
        with open('drebin.pickle', 'rb') as all_data:
            data = pickle.load(all_data)
            return data[0].todense(), data[1]
    else:
        files = get_encoded_features(prefixes)    
        X = [v for v in files.values()]
        hashes = malware_hashes()
        y = []
        for f in files:
        	if f in hashes:
        		y.append(1)
        	else:
        		y.append(0)
        print('creating sparse matrix...')
        X = csr_matrix(X)
        print('done')
        """
        with open('drebin.pickle', 'wb') as all_data:
            print('saving data in drabin.pickle...')
            pickle.dump([X, y], all_data)
            print('done')
        """
        return X, y
