import math
from sklearn.metrics import accuracy_score

class GaussianNB():

	def __init__(self):
		self.__summaries = {}

	def __mean(self, elements):
		return sum(elements) / float(len(elements))	

	def __stdev(self, numbers):
		avg = self.__mean(numbers)
		variance = sum( [ pow(x - avg, 2) for x in numbers ] ) / float(len(numbers)-1) 
		return math.sqrt(variance) 

	def __separate_by_class(self, X, y):
		data_len = len(X)
		elements = {}
		for i in range(data_len):
			elem = y[i]
			if elem not in elements:
				elements[elem] = []
			elements[elem].append(X[i])
		return elements

	def __summarize(self, X):
		summaries = [ (self.__mean(elem), self.__stdev(elem)) for elem in zip(*X) ]
		return summaries

	def __calculate_probability(self, x, mean, stdev):
		exponent = math.exp( -(math.pow(x-mean, 2) / (2*math.pow(stdev, 2))) )
		return (1 / (math.sqrt(2*math.pi)*stdev) ) * exponent

	def __calculate_class_probabilities(self, summaries, input_vector):
		probabilities = {}
		for class_value, class_summaries in summaries.items():
			probabilities[class_value] = 1
			for i in range(len(class_summaries)):
				mean, stdev = class_summaries[i]
				x = input_vector[i]
				probabilities[class_value] *= self.__calculate_probability(x, mean, stdev)
		return probabilities

	def __predict(self, summaries, input_vector):
		probabilities = self.__calculate_class_probabilities(summaries, input_vector)
		best_label, best_prob = None, -1
		for class_value, probability in probabilities.items():
			if best_label is None or probability > best_prob:
				best_prob = probability
				best_label = class_value
		return best_label

	def fit(self, X, y):
		separated = self.__separate_by_class(X, y)
		for class_value, instances in separated.items():
			self.__summaries[class_value] = self.__summarize(instances)

	def predict(self, X):
		predictions = []
		for elem in X:
			result = self.__predict(self.__summaries, elem)
			predictions.append(result)
		return predictions


class MultinomialNB(object):

	def __init__(self):
		pass

class BernoulliNB(object):

	def __init__(self):
		pass

