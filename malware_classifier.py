import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB

classifiers = {
    'svm'       : SVC(kernel='linear'),
    'random'    : RandomForestClassifier(n_estimators=100),
    'gaussian'  : MultinomialNB()
}

class MalwareClassifier(object):
    
    def __init__(self, classifier):
        self.classifier = classifiers[classifier]

    def fit(self, X, y):
        self.classifier.fit(X, y)

    def predict(self, X):
        return self.classifier.predict(X)

    def __false_positive_rate(self, y_true, y_pred):
        fp = confusion_matrix(y_true, y_pred).ravel()[1]
        tn = confusion_matrix(y_true, y_pred).ravel()[0]
        return fp / (fp + tn)

    def scores(self, y_pred, y_true):
        d = {}
        d['detection_score'] = accuracy_score(y_true, y_pred)
        d['precision_score'] = precision_score(y_true, y_pred)
        d['false_positive_rate'] = self.__false_positive_rate(y_true, y_pred)
        return d
    
    def print_results(self, all_scores):
        print("\n"+30*"-"+"\nResults:")
        for s in all_scores:
            print(s + ': %0.3f' % all_scores[s])
        print(30*"-"+"\n\n")

        
    
    
